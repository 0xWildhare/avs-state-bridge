import { createVlayerClient } from "@vlayer/sdk";
import proverSpec from "../out/SimpleTeleportProver.sol/SimpleTeleportProver";
import verifierSpec from "../out/SimpleTeleportVerifier.sol/SimpleTeleportVerifier";
import whaleBadgeNFTSpec from "../out/WhaleBadgeNFT.sol/WhaleBadgeNFT";
import easRegistrySpec from "../out/ISchemaRegistry.sol/ISchemaRegistry";
import resolverSpec from "../out/Resolver.sol/Resolver"; 
import easSpec from "../out/IEAS.sol/IEAS";
import {
  createContext,
  deployVlayerContracts,
  getConfig,
  waitForContractDeploy,
} from "@vlayer/sdk/config";

const config = getConfig();
const { chain, ethClient, account, proverUrl, confirmations } =
  await createContext(config);
const vlayer = createVlayerClient({
  url: proverUrl,
});

const deployWhaleBadgeHash = await ethClient.deployContract({
  abi: whaleBadgeNFTSpec.abi,
  bytecode: whaleBadgeNFTSpec.bytecode.object,
  account,
});

const whaleBadgeNFTAddress = await waitForContractDeploy({
  hash: deployWhaleBadgeHash,
});

const { prover, verifier } = await deployVlayerContracts({
  proverSpec,
  verifierSpec,
  proverArgs: [],
  verifierArgs: [whaleBadgeNFTAddress],
});

const resolverHash =  await ethClient.deployContract({
  abi: resolverSpec.abi,
  bytecode: resolverSpec.bytecode.object,
  args: [verifier, '0xC2679fBD37d54388Ce493F1DB75320D236e1815e'],
  account,
});

const resolverAddress = await waitForContractDeploy({
  hash: resolverHash,
});

console.log("Registering Schema...");
const schemaUID = await ethClient.writeContract({
  address: '0x0a7E2Ff54e76B8E6659aedc9103FB21c038050D0',
  abi: easRegistrySpec.abi,
  functionName: "register",
  args: ["", resolverAddress, true],
  account,
});
console.log("Registered as: ", schemaUID);

console.log("Proving...")

// hardcoding for example - this would be an input.
let arg =[
  [17203420365943240390740826592467537458989639846558524000889457412521937796943n, 20561686838620202016451046017383091581583709721142686192698930873609039143571n],
  [15218273893477907224949174538367281660944277992648268390344261226874337989878n, 18738259713669570948846667401642191234102945152021517526976327829897757302853n],
  [
    [8741258086822360013575763640184818987170286119128658670212705687850576852497n, 4484735509379861421847969495533292510006033013305911107793334098998162282631n], 
    [1862641940534050588762214516935512818435506730181686062582333321689924041687n, 9279930157123314418027063086160300995358305009368856974558966453646938411217n]
  ],
  [10497527636893454352864923236290758738025792679445979446354020268727805913637n, 13993169697551731723199950225085367744653988386670865521251598995478833482144n],
  [
    [2382205182681255600294931373131817887834875940594976325155185394960116590351n, 10580819284623370954790002714375140016147680195084804950608671850530179564435n],
    [17292239357178888840180906652188813607772975416652359368373721663484345911408n, 4096027848665720876650868254061278699098151919540652016865903027251775035612n],
    [1546701538683737181686206845121965148903244832408992845649875626631179451505n, 5523886431476131532289198078336571629413479418763382718171508006130874055966n],
    [20740727777062584758035410243604112680833344265486838705331323763204977820521n, 14641094141233722408843501887716452645032633182077149262277634145778680243531n],
    [647812400209092460133876056851694688868718361168783938967512908201017755167n, 20282381865910510781549383518723477291957888530806556496092034937671882852821n],
    [13711097379335511813684032880497158169811004950416027484480939499128084079472n, 1512918724017807414194937095953524836761061372151551947008236715774777041438n],
    [10217856769399297004683795445460380563799320296151356603509264251609496820215n, 7324663368270644733964900531374546823642142699821968116728079542650620266903n],
    [17754076191071461783977750277488183853311127945247264017313546595013628789693n, 21752015817196910280676294061146849823410998409292621319651040528834133068739n],
    [7592681257843670435722970401676095739513619111262944083935512308660809470887n, 12836062199522478982439140597429064448001515159872928096620759138786191591779n],
    [599178321236547415800840880284409056149987212113978388375426071979514433837n, 4654973170115825770931521785693472110019951618635443131404939330384767215428n],
    [2183591030603776147668239245055758899814056319318972797691335861895189761679n, 20071282663265234580553082623738684222922252374384154673629009850567502419554n],
    [12653060859860156496540318679164075009469395899003131335952889023880480539299n, 1769485668546837757622820543529214662528802426791459306676309388413706561350n]
  ]
];

const proofHash = await vlayer.prove({
  address: prover,
  proverAbi: proverSpec.abi,
  functionName: "checkSignature",
  args: [arg],
  chainId: chain.id,
});
const result = await vlayer.waitForProvingResult(proofHash);
console.log("Proof:", result[0]);
console.log("Verifying...");

// const verificationHash = await ethClient.writeContract({
//   address: verifier,
//   abi: verifierSpec.abi,
//   functionName: "verify",
//   args: result,
//   account,
// });

const request = [???}

const verificationHash = await ethClient.writeContract({
  address: '0xC2679fBD37d54388Ce493F1DB75320D236e1815e',
  abi: easSpec.abi,
  functionName: "attest",
  args: request,
  account,
});

const receipt = await ethClient.waitForTransactionReceipt({
  hash: verificationHash,
  confirmations,
  retryCount: 60,
  retryDelay: 1000,
});

console.log(`Verification result: ${receipt.status}`);


